require.config({"config": {
        "jsbuild":{"requirejs/domReady.js":"/**\n * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/domReady for details\n */\n/*jslint */\n/*global require: false, define: false, requirejs: false,\n  window: false, clearInterval: false, document: false,\n  self: false, setInterval: false */\n\n\ndefine(function () {\n    'use strict';\n\n    var isTop, testDiv, scrollIntervalId,\n        isBrowser = typeof window !== \"undefined\" && window.document,\n        isPageLoaded = !isBrowser,\n        doc = isBrowser ? document : null,\n        readyCalls = [];\n\n    function runCallbacks(callbacks) {\n        var i;\n        for (i = 0; i < callbacks.length; i += 1) {\n            callbacks[i](doc);\n        }\n    }\n\n    function callReady() {\n        var callbacks = readyCalls;\n\n        if (isPageLoaded) {\n            //Call the DOM ready callbacks\n            if (callbacks.length) {\n                readyCalls = [];\n                runCallbacks(callbacks);\n            }\n        }\n    }\n\n    /**\n     * Sets the page as loaded.\n     */\n    function pageLoaded() {\n        if (!isPageLoaded) {\n            isPageLoaded = true;\n            if (scrollIntervalId) {\n                clearInterval(scrollIntervalId);\n            }\n\n            callReady();\n        }\n    }\n\n    if (isBrowser) {\n        if (document.addEventListener) {\n            //Standards. Hooray! Assumption here that if standards based,\n            //it knows about DOMContentLoaded.\n            document.addEventListener(\"DOMContentLoaded\", pageLoaded, false);\n            window.addEventListener(\"load\", pageLoaded, false);\n        } else if (window.attachEvent) {\n            window.attachEvent(\"onload\", pageLoaded);\n\n            testDiv = document.createElement('div');\n            try {\n                isTop = window.frameElement === null;\n            } catch (e) {}\n\n            //DOMContentLoaded approximation that uses a doScroll, as found by\n            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,\n            //but modified by other contributors, including jdalton\n            if (testDiv.doScroll && isTop && window.external) {\n                scrollIntervalId = setInterval(function () {\n                    try {\n                        testDiv.doScroll();\n                        pageLoaded();\n                    } catch (e) {}\n                }, 30);\n            }\n        }\n\n        //Check if document is no longer loading, and if so, just trigger page load\n        //listeners. Latest webkit browsers also use \"interactive\", and\n        //will fire the onDOMContentLoaded before \"interactive\" but not after\n        //entering \"interactive\" or \"complete\". More details:\n        //http://dev.w3.org/html5/spec/the-end.html#the-end\n        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded\n        //Hmm, this is more complicated on further use, see \"firing too early\"\n        //bug: https://github.com/requirejs/domReady/issues/1\n        //so removing the || document.readyState === \"interactive\" test.\n        //There is still a window.onload binding that should get fired if\n        //DOMContentLoaded is missed.\n        if (document.readyState !== \"loading\") {\n            // Handle it asynchronously to allow scripts the opportunity to delay ready\n            setTimeout(pageLoaded);\n        }\n    }\n\n    /** START OF PUBLIC API **/\n\n    /**\n     * Registers a callback for DOM ready. If DOM is already ready, the\n     * callback is called immediately.\n     * @param {Function} callback\n     */\n    function domReady(callback) {\n        if (isPageLoaded) {\n            callback(doc);\n        } else {\n            readyCalls.push(callback);\n        }\n        return domReady;\n    }\n\n    domReady.version = '2.0.1';\n\n    /**\n     * Loader Plugin API method\n     */\n    domReady.load = function (name, req, onLoad, config) {\n        if (config.isBuild) {\n            onLoad(null);\n        } else {\n            domReady(onLoad);\n        }\n    };\n\n    /** END OF PUBLIC API **/\n\n    return domReady;\n});\n","Solwin_Cpanel/js/home-slider.js":"require(['jquery', 'cpowlcarousel'], function ($) {\n    $(document).ready(function () {\n        $(\".hb-slider\").owlCarousel({\n            items: 1,\n            itemsDesktop: [1080, 1],\n            itemsDesktopSmall: [860, 1],\n            itemsTablet: [768, 1],\n            itemsTabletSmall: [639, 1],\n            itemsMobile: [360, 1],\n            pagination: true,\n            navigationText: [\"<i class='fa fa-angle-left'></i>\", \"<i class='fa fa-angle-right'>\"],\n            navigation: false,\n        });\n\n        $(\".hpb-slider\").owlCarousel({\n            items: 3,\n            itemsDesktop: [1080, 3],\n            itemsDesktopSmall: [860, 3],\n            itemsTablet: [768, 2],\n            itemsTabletSmall: [639, 2],\n            itemsMobile: [479, 1],\n            pagination: false,\n            navigationText: ['<div class=\"lft-btn\"><i class=\"fa fa-angle-left\"></i></div>', '<div class=\"rgt-btn\"><i class=\"fa fa-angle-right\"></div>'],\n            navigation: true,\n        });\n        $(\".htb-slider\").owlCarousel({\n            items: 1,\n            itemsDesktop: [1080, 1],\n            itemsDesktopSmall: [860, 1],\n            itemsTablet: [768, 1],\n            itemsTabletSmall: [639, 1],\n            itemsMobile: [479, 1],\n            pagination: false,\n            navigationText: ['<div class=\"lft-btn\"><i class=\"fa fa-angle-left\"></i></div>', '<div class=\"rgt-btn\"><i class=\"fa fa-angle-right\"></div>'],\n            navigation: true,\n        });\n        $(\".hbr-slider\").owlCarousel({\n            items: 5,\n            itemsDesktop: [1080, 4],\n            itemsDesktopSmall: [860, 3],\n            itemsTablet: [768, 3],\n            itemsTabletSmall: [639, 3],\n            itemsMobile: [479, 2],\n            pagination: false,\n            navigationText: ['<div class=\"lft-btn\"><i class=\"fa fa-angle-left\"></i></div>', '<div class=\"rgt-btn\"><i class=\"fa fa-angle-right\"></div>'],\n            navigation: true,\n        });\n    });\n});","Solwin_Cpanel/js/owl.carousel.js":"/*\n *  jQuery OwlCarousel v1.3.3\n *\n *  Copyright (c) 2013 Bartosz Wojciechowski\n *  http://www.owlgraphic.com/owlcarousel/\n *\n *  Licensed under MIT\n *\n */\n\n/*JS Lint helpers: */\n/*global dragMove: false, dragEnd: false, $, jQuery, alert, window, document */\n/*jslint nomen: true, continue:true */\ndefine([\n    'jquery'\n], function () {\n    if (typeof Object.create !== \"function\") {\n        Object.create = function (obj) {\n            function F() {\n            }\n            F.prototype = obj;\n            return new F();\n        };\n    }\n    (function ($, window, document) {\n\n        var Carousel = {\n            init: function (options, el) {\n                var base = this;\n\n                base.$elem = $(el);\n                base.options = $.extend({}, $.fn.owlCarousel.options, base.$elem.data(), options);\n\n                base.userOptions = options;\n                base.loadContent();\n            },\n            loadContent: function () {\n                var base = this, url;\n\n                function getData(data) {\n                    var i, content = \"\";\n                    if (typeof base.options.jsonSuccess === \"function\") {\n                        base.options.jsonSuccess.apply(this, [data]);\n                    } else {\n                        for (i in data.owl) {\n                            if (data.owl.hasOwnProperty(i)) {\n                                content += data.owl[i].item;\n                            }\n                        }\n                        base.$elem.html(content);\n                    }\n                    base.logIn();\n                }\n\n                if (typeof base.options.beforeInit === \"function\") {\n                    base.options.beforeInit.apply(this, [base.$elem]);\n                }\n\n                if (typeof base.options.jsonPath === \"string\") {\n                    url = base.options.jsonPath;\n                    $.getJSON(url, getData);\n                } else {\n                    base.logIn();\n                }\n            },\n            logIn: function () {\n                var base = this;\n\n                base.$elem.data(\"owl-originalStyles\", base.$elem.attr(\"style\"));\n                base.$elem.data(\"owl-originalClasses\", base.$elem.attr(\"class\"));\n\n                base.$elem.css({opacity: 0});\n                base.orignalItems = base.options.items;\n                base.checkBrowser();\n                base.wrapperWidth = 0;\n                base.checkVisible = null;\n                base.setVars();\n            },\n            setVars: function () {\n                var base = this;\n                if (base.$elem.children().length === 0) {\n                    return false;\n                }\n                base.baseClass();\n                base.eventTypes();\n                base.$userItems = base.$elem.children();\n                base.itemsAmount = base.$userItems.length;\n                base.wrapItems();\n                base.$owlItems = base.$elem.find(\".owl-item\");\n                base.$owlWrapper = base.$elem.find(\".owl-wrapper\");\n                base.playDirection = \"next\";\n                base.prevItem = 0;\n                base.prevArr = [0];\n                base.currentItem = 0;\n                base.customEvents();\n                base.onStartup();\n            },\n            onStartup: function () {\n                var base = this;\n                base.updateItems();\n                base.calculateAll();\n                base.buildControls();\n                base.updateControls();\n                base.response();\n                base.moveEvents();\n                base.stopOnHover();\n                base.owlStatus();\n\n                if (base.options.transitionStyle !== false) {\n                    base.transitionTypes(base.options.transitionStyle);\n                }\n                if (base.options.autoPlay === true) {\n                    base.options.autoPlay = 5000;\n                }\n                base.play();\n\n                base.$elem.find(\".owl-wrapper\").css(\"display\", \"block\");\n\n                if (!base.$elem.is(\":visible\")) {\n                    base.watchVisibility();\n                } else {\n                    base.$elem.css(\"opacity\", 1);\n                }\n                base.onstartup = false;\n                base.eachMoveUpdate();\n                if (typeof base.options.afterInit === \"function\") {\n                    base.options.afterInit.apply(this, [base.$elem]);\n                }\n            },\n            eachMoveUpdate: function () {\n                var base = this;\n\n                if (base.options.lazyLoad === true) {\n                    base.lazyLoad();\n                }\n                if (base.options.autoHeight === true) {\n                    base.autoHeight();\n                }\n                base.onVisibleItems();\n\n                if (typeof base.options.afterAction === \"function\") {\n                    base.options.afterAction.apply(this, [base.$elem]);\n                }\n            },\n            updateVars: function () {\n                var base = this;\n                if (typeof base.options.beforeUpdate === \"function\") {\n                    base.options.beforeUpdate.apply(this, [base.$elem]);\n                }\n                base.watchVisibility();\n                base.updateItems();\n                base.calculateAll();\n                base.updatePosition();\n                base.updateControls();\n                base.eachMoveUpdate();\n                if (typeof base.options.afterUpdate === \"function\") {\n                    base.options.afterUpdate.apply(this, [base.$elem]);\n                }\n            },\n            reload: function () {\n                var base = this;\n                window.setTimeout(function () {\n                    base.updateVars();\n                }, 0);\n            },\n            watchVisibility: function () {\n                var base = this;\n\n                if (base.$elem.is(\":visible\") === false) {\n                    base.$elem.css({opacity: 0});\n                    window.clearInterval(base.autoPlayInterval);\n                    window.clearInterval(base.checkVisible);\n                } else {\n                    return false;\n                }\n                base.checkVisible = window.setInterval(function () {\n                    if (base.$elem.is(\":visible\")) {\n                        base.reload();\n                        base.$elem.animate({opacity: 1}, 200);\n                        window.clearInterval(base.checkVisible);\n                    }\n                }, 500);\n            },\n            wrapItems: function () {\n                var base = this;\n                base.$userItems.wrapAll(\"<div class=\\\"owl-wrapper\\\">\").wrap(\"<div class=\\\"owl-item\\\"></div>\");\n                base.$elem.find(\".owl-wrapper\").wrap(\"<div class=\\\"owl-wrapper-outer\\\">\");\n                base.wrapperOuter = base.$elem.find(\".owl-wrapper-outer\");\n                base.$elem.css(\"display\", \"block\");\n            },\n            baseClass: function () {\n                var base = this,\n                        hasBaseClass = base.$elem.hasClass(base.options.baseClass),\n                        hasThemeClass = base.$elem.hasClass(base.options.theme);\n\n                if (!hasBaseClass) {\n                    base.$elem.addClass(base.options.baseClass);\n                }\n\n                if (!hasThemeClass) {\n                    base.$elem.addClass(base.options.theme);\n                }\n            },\n            updateItems: function () {\n                var base = this, width, i;\n\n                if (base.options.responsive === false) {\n                    return false;\n                }\n                if (base.options.singleItem === true) {\n                    base.options.items = base.orignalItems = 1;\n                    base.options.itemsCustom = false;\n                    base.options.itemsDesktop = false;\n                    base.options.itemsDesktopSmall = false;\n                    base.options.itemsTablet = false;\n                    base.options.itemsTabletSmall = false;\n                    base.options.itemsMobile = false;\n                    return false;\n                }\n\n                width = $(base.options.responsiveBaseWidth).width();\n\n                if (width > (base.options.itemsDesktop[0] || base.orignalItems)) {\n                    base.options.items = base.orignalItems;\n                }\n                if (base.options.itemsCustom !== false) {\n                    //Reorder array by screen size\n                    base.options.itemsCustom.sort(function (a, b) {\n                        return a[0] - b[0];\n                    });\n\n                    for (i = 0; i < base.options.itemsCustom.length; i += 1) {\n                        if (base.options.itemsCustom[i][0] <= width) {\n                            base.options.items = base.options.itemsCustom[i][1];\n                        }\n                    }\n\n                } else {\n\n                    if (width <= base.options.itemsDesktop[0] && base.options.itemsDesktop !== false) {\n                        base.options.items = base.options.itemsDesktop[1];\n                    }\n\n                    if (width <= base.options.itemsDesktopSmall[0] && base.options.itemsDesktopSmall !== false) {\n                        base.options.items = base.options.itemsDesktopSmall[1];\n                    }\n\n                    if (width <= base.options.itemsTablet[0] && base.options.itemsTablet !== false) {\n                        base.options.items = base.options.itemsTablet[1];\n                    }\n\n                    if (width <= base.options.itemsTabletSmall[0] && base.options.itemsTabletSmall !== false) {\n                        base.options.items = base.options.itemsTabletSmall[1];\n                    }\n\n                    if (width <= base.options.itemsMobile[0] && base.options.itemsMobile !== false) {\n                        base.options.items = base.options.itemsMobile[1];\n                    }\n                }\n\n                //if number of items is less than declared\n                if (base.options.items > base.itemsAmount && base.options.itemsScaleUp === true) {\n                    base.options.items = base.itemsAmount;\n                }\n            },\n            response: function () {\n                var base = this,\n                        smallDelay,\n                        lastWindowWidth;\n\n                if (base.options.responsive !== true) {\n                    return false;\n                }\n                lastWindowWidth = $(window).width();\n\n                base.resizer = function () {\n                    if ($(window).width() !== lastWindowWidth) {\n                        if (base.options.autoPlay !== false) {\n                            window.clearInterval(base.autoPlayInterval);\n                        }\n                        window.clearTimeout(smallDelay);\n                        smallDelay = window.setTimeout(function () {\n                            lastWindowWidth = $(window).width();\n                            base.updateVars();\n                        }, base.options.responsiveRefreshRate);\n                    }\n                };\n                $(window).resize(base.resizer);\n            },\n            updatePosition: function () {\n                var base = this;\n                base.jumpTo(base.currentItem);\n                if (base.options.autoPlay !== false) {\n                    base.checkAp();\n                }\n            },\n            appendItemsSizes: function () {\n                var base = this,\n                        roundPages = 0,\n                        lastItem = base.itemsAmount - base.options.items;\n\n                base.$owlItems.each(function (index) {\n                    var $this = $(this);\n                    $this\n                            .css({\"width\": base.itemWidth})\n                            .data(\"owl-item\", Number(index));\n\n                    if (index % base.options.items === 0 || index === lastItem) {\n                        if (!(index > lastItem)) {\n                            roundPages += 1;\n                        }\n                    }\n                    $this.data(\"owl-roundPages\", roundPages);\n                });\n            },\n            appendWrapperSizes: function () {\n                var base = this,\n                        width = base.$owlItems.length * base.itemWidth;\n\n                base.$owlWrapper.css({\n                    \"width\": width * 2,\n                    \"left\": 0\n                });\n                base.appendItemsSizes();\n            },\n            calculateAll: function () {\n                var base = this;\n                base.calculateWidth();\n                base.appendWrapperSizes();\n                base.loops();\n                base.max();\n            },\n            calculateWidth: function () {\n                var base = this;\n                base.itemWidth = Math.round(base.$elem.width() / base.options.items);\n            },\n            max: function () {\n                var base = this,\n                        maximum = ((base.itemsAmount * base.itemWidth) - base.options.items * base.itemWidth) * -1;\n                if (base.options.items > base.itemsAmount) {\n                    base.maximumItem = 0;\n                    maximum = 0;\n                    base.maximumPixels = 0;\n                } else {\n                    base.maximumItem = base.itemsAmount - base.options.items;\n                    base.maximumPixels = maximum;\n                }\n                return maximum;\n            },\n            min: function () {\n                return 0;\n            },\n            loops: function () {\n                var base = this,\n                        prev = 0,\n                        elWidth = 0,\n                        i,\n                        item,\n                        roundPageNum;\n\n                base.positionsInArray = [0];\n                base.pagesInArray = [];\n\n                for (i = 0; i < base.itemsAmount; i += 1) {\n                    elWidth += base.itemWidth;\n                    base.positionsInArray.push(-elWidth);\n\n                    if (base.options.scrollPerPage === true) {\n                        item = $(base.$owlItems[i]);\n                        roundPageNum = item.data(\"owl-roundPages\");\n                        if (roundPageNum !== prev) {\n                            base.pagesInArray[prev] = base.positionsInArray[i];\n                            prev = roundPageNum;\n                        }\n                    }\n                }\n            },\n            buildControls: function () {\n                var base = this;\n                if (base.options.navigation === true || base.options.pagination === true) {\n                    base.owlControls = $(\"<div class=\\\"owl-controls\\\"/>\").toggleClass(\"clickable\", !base.browser.isTouch).appendTo(base.$elem);\n                }\n                if (base.options.pagination === true) {\n                    base.buildPagination();\n                }\n                if (base.options.navigation === true) {\n                    base.buildButtons();\n                }\n            },\n            buildButtons: function () {\n                var base = this,\n                        buttonsWrapper = $(\"<div class=\\\"owl-buttons\\\"/>\");\n                base.owlControls.append(buttonsWrapper);\n\n                base.buttonPrev = $(\"<div/>\", {\n                    \"class\": \"owl-prev\",\n                    \"html\": base.options.navigationText[0] || \"\"\n                });\n\n                base.buttonNext = $(\"<div/>\", {\n                    \"class\": \"owl-next\",\n                    \"html\": base.options.navigationText[1] || \"\"\n                });\n\n                buttonsWrapper\n                        .append(base.buttonPrev)\n                        .append(base.buttonNext);\n\n                buttonsWrapper.on(\"touchstart.owlControls mousedown.owlControls\", \"div[class^=\\\"owl\\\"]\", function (event) {\n                    event.preventDefault();\n                });\n\n                buttonsWrapper.on(\"touchend.owlControls mouseup.owlControls\", \"div[class^=\\\"owl\\\"]\", function (event) {\n                    event.preventDefault();\n                    if ($(this).hasClass(\"owl-next\")) {\n                        base.next();\n                    } else {\n                        base.prev();\n                    }\n                });\n            },\n            buildPagination: function () {\n                var base = this;\n\n                base.paginationWrapper = $(\"<div class=\\\"owl-pagination\\\"/>\");\n                base.owlControls.append(base.paginationWrapper);\n\n                base.paginationWrapper.on(\"touchend.owlControls mouseup.owlControls\", \".owl-page\", function (event) {\n                    event.preventDefault();\n                    if (Number($(this).data(\"owl-page\")) !== base.currentItem) {\n                        base.goTo(Number($(this).data(\"owl-page\")), true);\n                    }\n                });\n            },\n            updatePagination: function () {\n                var base = this,\n                        counter,\n                        lastPage,\n                        lastItem,\n                        i,\n                        paginationButton,\n                        paginationButtonInner;\n\n                if (base.options.pagination === false) {\n                    return false;\n                }\n\n                base.paginationWrapper.html(\"\");\n\n                counter = 0;\n                lastPage = base.itemsAmount - base.itemsAmount % base.options.items;\n\n                for (i = 0; i < base.itemsAmount; i += 1) {\n                    if (i % base.options.items === 0) {\n                        counter += 1;\n                        if (lastPage === i) {\n                            lastItem = base.itemsAmount - base.options.items;\n                        }\n                        paginationButton = $(\"<div/>\", {\n                            \"class\": \"owl-page\"\n                        });\n                        paginationButtonInner = $(\"<span></span>\", {\n                            \"text\": base.options.paginationNumbers === true ? counter : \"\",\n                            \"class\": base.options.paginationNumbers === true ? \"owl-numbers\" : \"\"\n                        });\n                        paginationButton.append(paginationButtonInner);\n\n                        paginationButton.data(\"owl-page\", lastPage === i ? lastItem : i);\n                        paginationButton.data(\"owl-roundPages\", counter);\n\n                        base.paginationWrapper.append(paginationButton);\n                    }\n                }\n                base.checkPagination();\n            },\n            checkPagination: function () {\n                var base = this;\n                if (base.options.pagination === false) {\n                    return false;\n                }\n                base.paginationWrapper.find(\".owl-page\").each(function () {\n                    if ($(this).data(\"owl-roundPages\") === $(base.$owlItems[base.currentItem]).data(\"owl-roundPages\")) {\n                        base.paginationWrapper\n                                .find(\".owl-page\")\n                                .removeClass(\"active\");\n                        $(this).addClass(\"active\");\n                    }\n                });\n            },\n            checkNavigation: function () {\n                var base = this;\n\n                if (base.options.navigation === false) {\n                    return false;\n                }\n                if (base.options.rewindNav === false) {\n                    if (base.currentItem === 0 && base.maximumItem === 0) {\n                        base.buttonPrev.addClass(\"disabled\");\n                        base.buttonNext.addClass(\"disabled\");\n                    } else if (base.currentItem === 0 && base.maximumItem !== 0) {\n                        base.buttonPrev.addClass(\"disabled\");\n                        base.buttonNext.removeClass(\"disabled\");\n                    } else if (base.currentItem === base.maximumItem) {\n                        base.buttonPrev.removeClass(\"disabled\");\n                        base.buttonNext.addClass(\"disabled\");\n                    } else if (base.currentItem !== 0 && base.currentItem !== base.maximumItem) {\n                        base.buttonPrev.removeClass(\"disabled\");\n                        base.buttonNext.removeClass(\"disabled\");\n                    }\n                }\n            },\n            updateControls: function () {\n                var base = this;\n                base.updatePagination();\n                base.checkNavigation();\n                if (base.owlControls) {\n                    if (base.options.items >= base.itemsAmount) {\n                        base.owlControls.hide();\n                    } else {\n                        base.owlControls.show();\n                    }\n                }\n            },\n            destroyControls: function () {\n                var base = this;\n                if (base.owlControls) {\n                    base.owlControls.remove();\n                }\n            },\n            next: function (speed) {\n                var base = this;\n\n                if (base.isTransition) {\n                    return false;\n                }\n\n                base.currentItem += base.options.scrollPerPage === true ? base.options.items : 1;\n                if (base.currentItem > base.maximumItem + (base.options.scrollPerPage === true ? (base.options.items - 1) : 0)) {\n                    if (base.options.rewindNav === true) {\n                        base.currentItem = 0;\n                        speed = \"rewind\";\n                    } else {\n                        base.currentItem = base.maximumItem;\n                        return false;\n                    }\n                }\n                base.goTo(base.currentItem, speed);\n            },\n            prev: function (speed) {\n                var base = this;\n\n                if (base.isTransition) {\n                    return false;\n                }\n\n                if (base.options.scrollPerPage === true && base.currentItem > 0 && base.currentItem < base.options.items) {\n                    base.currentItem = 0;\n                } else {\n                    base.currentItem -= base.options.scrollPerPage === true ? base.options.items : 1;\n                }\n                if (base.currentItem < 0) {\n                    if (base.options.rewindNav === true) {\n                        base.currentItem = base.maximumItem;\n                        speed = \"rewind\";\n                    } else {\n                        base.currentItem = 0;\n                        return false;\n                    }\n                }\n                base.goTo(base.currentItem, speed);\n            },\n            goTo: function (position, speed, drag) {\n                var base = this,\n                        goToPixel;\n\n                if (base.isTransition) {\n                    return false;\n                }\n                if (typeof base.options.beforeMove === \"function\") {\n                    base.options.beforeMove.apply(this, [base.$elem]);\n                }\n                if (position >= base.maximumItem) {\n                    position = base.maximumItem;\n                } else if (position <= 0) {\n                    position = 0;\n                }\n\n                base.currentItem = base.owl.currentItem = position;\n                if (base.options.transitionStyle !== false && drag !== \"drag\" && base.options.items === 1 && base.browser.support3d === true) {\n                    base.swapSpeed(0);\n                    if (base.browser.support3d === true) {\n                        base.transition3d(base.positionsInArray[position]);\n                    } else {\n                        base.css2slide(base.positionsInArray[position], 1);\n                    }\n                    base.afterGo();\n                    base.singleItemTransition();\n                    return false;\n                }\n                goToPixel = base.positionsInArray[position];\n\n                if (base.browser.support3d === true) {\n                    base.isCss3Finish = false;\n\n                    if (speed === true) {\n                        base.swapSpeed(\"paginationSpeed\");\n                        window.setTimeout(function () {\n                            base.isCss3Finish = true;\n                        }, base.options.paginationSpeed);\n\n                    } else if (speed === \"rewind\") {\n                        base.swapSpeed(base.options.rewindSpeed);\n                        window.setTimeout(function () {\n                            base.isCss3Finish = true;\n                        }, base.options.rewindSpeed);\n\n                    } else {\n                        base.swapSpeed(\"slideSpeed\");\n                        window.setTimeout(function () {\n                            base.isCss3Finish = true;\n                        }, base.options.slideSpeed);\n                    }\n                    base.transition3d(goToPixel);\n                } else {\n                    if (speed === true) {\n                        base.css2slide(goToPixel, base.options.paginationSpeed);\n                    } else if (speed === \"rewind\") {\n                        base.css2slide(goToPixel, base.options.rewindSpeed);\n                    } else {\n                        base.css2slide(goToPixel, base.options.slideSpeed);\n                    }\n                }\n                base.afterGo();\n            },\n            jumpTo: function (position) {\n                var base = this;\n                if (typeof base.options.beforeMove === \"function\") {\n                    base.options.beforeMove.apply(this, [base.$elem]);\n                }\n                if (position >= base.maximumItem || position === -1) {\n                    position = base.maximumItem;\n                } else if (position <= 0) {\n                    position = 0;\n                }\n                base.swapSpeed(0);\n                if (base.browser.support3d === true) {\n                    base.transition3d(base.positionsInArray[position]);\n                } else {\n                    base.css2slide(base.positionsInArray[position], 1);\n                }\n                base.currentItem = base.owl.currentItem = position;\n                base.afterGo();\n            },\n            afterGo: function () {\n                var base = this;\n\n                base.prevArr.push(base.currentItem);\n                base.prevItem = base.owl.prevItem = base.prevArr[base.prevArr.length - 2];\n                base.prevArr.shift(0);\n\n                if (base.prevItem !== base.currentItem) {\n                    base.checkPagination();\n                    base.checkNavigation();\n                    base.eachMoveUpdate();\n\n                    if (base.options.autoPlay !== false) {\n                        base.checkAp();\n                    }\n                }\n                if (typeof base.options.afterMove === \"function\" && base.prevItem !== base.currentItem) {\n                    base.options.afterMove.apply(this, [base.$elem]);\n                }\n            },\n            stop: function () {\n                var base = this;\n                base.apStatus = \"stop\";\n                window.clearInterval(base.autoPlayInterval);\n            },\n            checkAp: function () {\n                var base = this;\n                if (base.apStatus !== \"stop\") {\n                    base.play();\n                }\n            },\n            play: function () {\n                var base = this;\n                base.apStatus = \"play\";\n                if (base.options.autoPlay === false) {\n                    return false;\n                }\n                window.clearInterval(base.autoPlayInterval);\n                base.autoPlayInterval = window.setInterval(function () {\n                    base.next(true);\n                }, base.options.autoPlay);\n            },\n            swapSpeed: function (action) {\n                var base = this;\n                if (action === \"slideSpeed\") {\n                    base.$owlWrapper.css(base.addCssSpeed(base.options.slideSpeed));\n                } else if (action === \"paginationSpeed\") {\n                    base.$owlWrapper.css(base.addCssSpeed(base.options.paginationSpeed));\n                } else if (typeof action !== \"string\") {\n                    base.$owlWrapper.css(base.addCssSpeed(action));\n                }\n            },\n            addCssSpeed: function (speed) {\n                return {\n                    \"-webkit-transition\": \"all \" + speed + \"ms ease\",\n                    \"-moz-transition\": \"all \" + speed + \"ms ease\",\n                    \"-o-transition\": \"all \" + speed + \"ms ease\",\n                    \"transition\": \"all \" + speed + \"ms ease\"\n                };\n            },\n            removeTransition: function () {\n                return {\n                    \"-webkit-transition\": \"\",\n                    \"-moz-transition\": \"\",\n                    \"-o-transition\": \"\",\n                    \"transition\": \"\"\n                };\n            },\n            doTranslate: function (pixels) {\n                return {\n                    \"-webkit-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"-moz-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"-o-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"-ms-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"transform\": \"translate3d(\" + pixels + \"px, 0px,0px)\"\n                };\n            },\n            transition3d: function (value) {\n                var base = this;\n                base.$owlWrapper.css(base.doTranslate(value));\n            },\n            css2move: function (value) {\n                var base = this;\n                base.$owlWrapper.css({\"left\": value});\n            },\n            css2slide: function (value, speed) {\n                var base = this;\n\n                base.isCssFinish = false;\n                base.$owlWrapper.stop(true, true).animate({\n                    \"left\": value\n                }, {\n                    duration: speed || base.options.slideSpeed,\n                    complete: function () {\n                        base.isCssFinish = true;\n                    }\n                });\n            },\n            checkBrowser: function () {\n                var base = this,\n                        translate3D = \"translate3d(0px, 0px, 0px)\",\n                        tempElem = document.createElement(\"div\"),\n                        regex,\n                        asSupport,\n                        support3d,\n                        isTouch;\n\n                tempElem.style.cssText = \"  -moz-transform:\" + translate3D +\n                        \"; -ms-transform:\" + translate3D +\n                        \"; -o-transform:\" + translate3D +\n                        \"; -webkit-transform:\" + translate3D +\n                        \"; transform:\" + translate3D;\n                regex = /translate3d\\(0px, 0px, 0px\\)/g;\n                asSupport = tempElem.style.cssText.match(regex);\n                support3d = (asSupport !== null && asSupport.length === 1);\n\n                isTouch = \"ontouchstart\" in window || window.navigator.msMaxTouchPoints;\n\n                base.browser = {\n                    \"support3d\": support3d,\n                    \"isTouch\": isTouch\n                };\n            },\n            moveEvents: function () {\n                var base = this;\n                if (base.options.mouseDrag !== false || base.options.touchDrag !== false) {\n                    base.gestures();\n                    base.disabledEvents();\n                }\n            },\n            eventTypes: function () {\n                var base = this,\n                        types = [\"s\", \"e\", \"x\"];\n\n                base.ev_types = {};\n\n                if (base.options.mouseDrag === true && base.options.touchDrag === true) {\n                    types = [\n                        \"touchstart.owl mousedown.owl\",\n                        \"touchmove.owl mousemove.owl\",\n                        \"touchend.owl touchcancel.owl mouseup.owl\"\n                    ];\n                } else if (base.options.mouseDrag === false && base.options.touchDrag === true) {\n                    types = [\n                        \"touchstart.owl\",\n                        \"touchmove.owl\",\n                        \"touchend.owl touchcancel.owl\"\n                    ];\n                } else if (base.options.mouseDrag === true && base.options.touchDrag === false) {\n                    types = [\n                        \"mousedown.owl\",\n                        \"mousemove.owl\",\n                        \"mouseup.owl\"\n                    ];\n                }\n\n                base.ev_types.start = types[0];\n                base.ev_types.move = types[1];\n                base.ev_types.end = types[2];\n            },\n            disabledEvents: function () {\n                var base = this;\n                base.$elem.on(\"dragstart.owl\", function (event) {\n                    event.preventDefault();\n                });\n                base.$elem.on(\"mousedown.disableTextSelect\", function (e) {\n                    return $(e.target).is('input, textarea, select, option');\n                });\n            },\n            gestures: function () {\n                /*jslint unparam: true*/\n                var base = this,\n                        locals = {\n                            offsetX: 0,\n                            offsetY: 0,\n                            baseElWidth: 0,\n                            relativePos: 0,\n                            position: null,\n                            minSwipe: null,\n                            maxSwipe: null,\n                            sliding: null,\n                            dargging: null,\n                            targetElement: null\n                        };\n\n                base.isCssFinish = true;\n\n                function getTouches(event) {\n                    if (event.touches !== undefined) {\n                        return {\n                            x: event.touches[0].pageX,\n                            y: event.touches[0].pageY\n                        };\n                    }\n\n                    if (event.touches === undefined) {\n                        if (event.pageX !== undefined) {\n                            return {\n                                x: event.pageX,\n                                y: event.pageY\n                            };\n                        }\n                        if (event.pageX === undefined) {\n                            return {\n                                x: event.clientX,\n                                y: event.clientY\n                            };\n                        }\n                    }\n                }\n\n                function swapEvents(type) {\n                    if (type === \"on\") {\n                        $(document).on(base.ev_types.move, dragMove);\n                        $(document).on(base.ev_types.end, dragEnd);\n                    } else if (type === \"off\") {\n                        $(document).off(base.ev_types.move);\n                        $(document).off(base.ev_types.end);\n                    }\n                }\n\n                function dragStart(event) {\n                    var ev = event.originalEvent || event || window.event,\n                            position;\n\n                    if (ev.which === 3) {\n                        return false;\n                    }\n                    if (base.itemsAmount <= base.options.items) {\n                        return;\n                    }\n                    if (base.isCssFinish === false && !base.options.dragBeforeAnimFinish) {\n                        return false;\n                    }\n                    if (base.isCss3Finish === false && !base.options.dragBeforeAnimFinish) {\n                        return false;\n                    }\n\n                    if (base.options.autoPlay !== false) {\n                        window.clearInterval(base.autoPlayInterval);\n                    }\n\n                    if (base.browser.isTouch !== true && !base.$owlWrapper.hasClass(\"grabbing\")) {\n                        base.$owlWrapper.addClass(\"grabbing\");\n                    }\n\n                    base.newPosX = 0;\n                    base.newRelativeX = 0;\n\n                    $(this).css(base.removeTransition());\n\n                    position = $(this).position();\n                    locals.relativePos = position.left;\n\n                    locals.offsetX = getTouches(ev).x - position.left;\n                    locals.offsetY = getTouches(ev).y - position.top;\n\n                    swapEvents(\"on\");\n\n                    locals.sliding = false;\n                    locals.targetElement = ev.target || ev.srcElement;\n                }\n\n                function dragMove(event) {\n                    var ev = event.originalEvent || event || window.event,\n                            minSwipe,\n                            maxSwipe;\n\n                    base.newPosX = getTouches(ev).x - locals.offsetX;\n                    base.newPosY = getTouches(ev).y - locals.offsetY;\n                    base.newRelativeX = base.newPosX - locals.relativePos;\n\n                    if (typeof base.options.startDragging === \"function\" && locals.dragging !== true && base.newRelativeX !== 0) {\n                        locals.dragging = true;\n                        base.options.startDragging.apply(base, [base.$elem]);\n                    }\n\n                    if ((base.newRelativeX > 8 || base.newRelativeX < -8) && (base.browser.isTouch === true)) {\n                        if (ev.preventDefault !== undefined) {\n                            ev.preventDefault();\n                        } else {\n                            ev.returnValue = false;\n                        }\n                        locals.sliding = true;\n                    }\n\n                    if ((base.newPosY > 10 || base.newPosY < -10) && locals.sliding === false) {\n                        $(document).off(\"touchmove.owl\");\n                    }\n\n                    minSwipe = function () {\n                        return base.newRelativeX / 5;\n                    };\n\n                    maxSwipe = function () {\n                        return base.maximumPixels + base.newRelativeX / 5;\n                    };\n\n                    base.newPosX = Math.max(Math.min(base.newPosX, minSwipe()), maxSwipe());\n                    if (base.browser.support3d === true) {\n                        base.transition3d(base.newPosX);\n                    } else {\n                        base.css2move(base.newPosX);\n                    }\n                }\n\n                function dragEnd(event) {\n                    var ev = event.originalEvent || event || window.event,\n                            newPosition,\n                            handlers,\n                            owlStopEvent;\n\n                    ev.target = ev.target || ev.srcElement;\n\n                    locals.dragging = false;\n\n                    if (base.browser.isTouch !== true) {\n                        base.$owlWrapper.removeClass(\"grabbing\");\n                    }\n\n                    if (base.newRelativeX < 0) {\n                        base.dragDirection = base.owl.dragDirection = \"left\";\n                    } else {\n                        base.dragDirection = base.owl.dragDirection = \"right\";\n                    }\n\n                    if (base.newRelativeX !== 0) {\n                        newPosition = base.getNewPosition();\n                        base.goTo(newPosition, false, \"drag\");\n                        if (locals.targetElement === ev.target && base.browser.isTouch !== true) {\n                            $(ev.target).on(\"click.disable\", function (ev) {\n                                ev.stopImmediatePropagation();\n                                ev.stopPropagation();\n                                ev.preventDefault();\n                                $(ev.target).off(\"click.disable\");\n                            });\n                            handlers = $._data(ev.target, \"events\").click;\n                            owlStopEvent = handlers.pop();\n                            handlers.splice(0, 0, owlStopEvent);\n                        }\n                    }\n                    swapEvents(\"off\");\n                }\n                base.$elem.on(base.ev_types.start, \".owl-wrapper\", dragStart);\n            },\n            getNewPosition: function () {\n                var base = this,\n                        newPosition = base.closestItem();\n\n                if (newPosition > base.maximumItem) {\n                    base.currentItem = base.maximumItem;\n                    newPosition = base.maximumItem;\n                } else if (base.newPosX >= 0) {\n                    newPosition = 0;\n                    base.currentItem = 0;\n                }\n                return newPosition;\n            },\n            closestItem: function () {\n                var base = this,\n                        array = base.options.scrollPerPage === true ? base.pagesInArray : base.positionsInArray,\n                        goal = base.newPosX,\n                        closest = null;\n\n                $.each(array, function (i, v) {\n                    if (goal - (base.itemWidth / 20) > array[i + 1] && goal - (base.itemWidth / 20) < v && base.moveDirection() === \"left\") {\n                        closest = v;\n                        if (base.options.scrollPerPage === true) {\n                            base.currentItem = $.inArray(closest, base.positionsInArray);\n                        } else {\n                            base.currentItem = i;\n                        }\n                    } else if (goal + (base.itemWidth / 20) < v && goal + (base.itemWidth / 20) > (array[i + 1] || array[i] - base.itemWidth) && base.moveDirection() === \"right\") {\n                        if (base.options.scrollPerPage === true) {\n                            closest = array[i + 1] || array[array.length - 1];\n                            base.currentItem = $.inArray(closest, base.positionsInArray);\n                        } else {\n                            closest = array[i + 1];\n                            base.currentItem = i + 1;\n                        }\n                    }\n                });\n                return base.currentItem;\n            },\n            moveDirection: function () {\n                var base = this,\n                        direction;\n                if (base.newRelativeX < 0) {\n                    direction = \"right\";\n                    base.playDirection = \"next\";\n                } else {\n                    direction = \"left\";\n                    base.playDirection = \"prev\";\n                }\n                return direction;\n            },\n            customEvents: function () {\n                /*jslint unparam: true*/\n                var base = this;\n                base.$elem.on(\"owl.next\", function () {\n                    base.next();\n                });\n                base.$elem.on(\"owl.prev\", function () {\n                    base.prev();\n                });\n                base.$elem.on(\"owl.play\", function (event, speed) {\n                    base.options.autoPlay = speed;\n                    base.play();\n                    base.hoverStatus = \"play\";\n                });\n                base.$elem.on(\"owl.stop\", function () {\n                    base.stop();\n                    base.hoverStatus = \"stop\";\n                });\n                base.$elem.on(\"owl.goTo\", function (event, item) {\n                    base.goTo(item);\n                });\n                base.$elem.on(\"owl.jumpTo\", function (event, item) {\n                    base.jumpTo(item);\n                });\n            },\n            stopOnHover: function () {\n                var base = this;\n                if (base.options.stopOnHover === true && base.browser.isTouch !== true && base.options.autoPlay !== false) {\n                    base.$elem.on(\"mouseover\", function () {\n                        base.stop();\n                    });\n                    base.$elem.on(\"mouseout\", function () {\n                        if (base.hoverStatus !== \"stop\") {\n                            base.play();\n                        }\n                    });\n                }\n            },\n            lazyLoad: function () {\n                var base = this,\n                        i,\n                        $item,\n                        itemNumber,\n                        $lazyImg,\n                        follow;\n\n                if (base.options.lazyLoad === false) {\n                    return false;\n                }\n                for (i = 0; i < base.itemsAmount; i += 1) {\n                    $item = $(base.$owlItems[i]);\n\n                    if ($item.data(\"owl-loaded\") === \"loaded\") {\n                        continue;\n                    }\n\n                    itemNumber = $item.data(\"owl-item\");\n                    $lazyImg = $item.find(\".lazyOwl\");\n\n                    if (typeof $lazyImg.data(\"src\") !== \"string\") {\n                        $item.data(\"owl-loaded\", \"loaded\");\n                        continue;\n                    }\n                    if ($item.data(\"owl-loaded\") === undefined) {\n                        $lazyImg.hide();\n                        $item.addClass(\"loading\").data(\"owl-loaded\", \"checked\");\n                    }\n                    if (base.options.lazyFollow === true) {\n                        follow = itemNumber >= base.currentItem;\n                    } else {\n                        follow = true;\n                    }\n                    if (follow && itemNumber < base.currentItem + base.options.items && $lazyImg.length) {\n                        base.lazyPreload($item, $lazyImg);\n                    }\n                }\n            },\n            lazyPreload: function ($item, $lazyImg) {\n                var base = this,\n                        iterations = 0,\n                        isBackgroundImg;\n\n                if ($lazyImg.prop(\"tagName\") === \"DIV\") {\n                    $lazyImg.css(\"background-image\", \"url(\" + $lazyImg.data(\"src\") + \")\");\n                    isBackgroundImg = true;\n                } else {\n                    $lazyImg[0].src = $lazyImg.data(\"src\");\n                }\n\n                function showImage() {\n                    $item.data(\"owl-loaded\", \"loaded\").removeClass(\"loading\");\n                    $lazyImg.removeAttr(\"data-src\");\n                    if (base.options.lazyEffect === \"fade\") {\n                        $lazyImg.fadeIn(400);\n                    } else {\n                        $lazyImg.show();\n                    }\n                    if (typeof base.options.afterLazyLoad === \"function\") {\n                        base.options.afterLazyLoad.apply(this, [base.$elem]);\n                    }\n                }\n\n                function checkLazyImage() {\n                    iterations += 1;\n                    if (base.completeImg($lazyImg.get(0)) || isBackgroundImg === true) {\n                        showImage();\n                    } else if (iterations <= 100) {//if image loads in less than 10 seconds \n                        window.setTimeout(checkLazyImage, 100);\n                    } else {\n                        showImage();\n                    }\n                }\n\n                checkLazyImage();\n            },\n            autoHeight: function () {\n                var base = this,\n                        $currentimg = $(base.$owlItems[base.currentItem]).find(\"img\"),\n                        iterations;\n\n                function addHeight() {\n                    var $currentItem = $(base.$owlItems[base.currentItem]).height();\n                    base.wrapperOuter.css(\"height\", $currentItem + \"px\");\n                    if (!base.wrapperOuter.hasClass(\"autoHeight\")) {\n                        window.setTimeout(function () {\n                            base.wrapperOuter.addClass(\"autoHeight\");\n                        }, 0);\n                    }\n                }\n\n                function checkImage() {\n                    iterations += 1;\n                    if (base.completeImg($currentimg.get(0))) {\n                        addHeight();\n                    } else if (iterations <= 100) { //if image loads in less than 10 seconds \n                        window.setTimeout(checkImage, 100);\n                    } else {\n                        base.wrapperOuter.css(\"height\", \"\"); //Else remove height attribute\n                    }\n                }\n\n                if ($currentimg.get(0) !== undefined) {\n                    iterations = 0;\n                    checkImage();\n                } else {\n                    addHeight();\n                }\n            },\n            completeImg: function (img) {\n                var naturalWidthType;\n\n                if (!img.complete) {\n                    return false;\n                }\n                naturalWidthType = typeof img.naturalWidth;\n                if (naturalWidthType !== \"undefined\" && img.naturalWidth === 0) {\n                    return false;\n                }\n                return true;\n            },\n            onVisibleItems: function () {\n                var base = this,\n                        i;\n\n                if (base.options.addClassActive === true) {\n                    base.$owlItems.removeClass(\"active\");\n                }\n                base.visibleItems = [];\n                for (i = base.currentItem; i < base.currentItem + base.options.items; i += 1) {\n                    base.visibleItems.push(i);\n\n                    if (base.options.addClassActive === true) {\n                        $(base.$owlItems[i]).addClass(\"active\");\n                    }\n                }\n                base.owl.visibleItems = base.visibleItems;\n            },\n            transitionTypes: function (className) {\n                var base = this;\n                //Currently available: \"fade\", \"backSlide\", \"goDown\", \"fadeUp\"\n                base.outClass = \"owl-\" + className + \"-out\";\n                base.inClass = \"owl-\" + className + \"-in\";\n            },\n            singleItemTransition: function () {\n                var base = this,\n                        outClass = base.outClass,\n                        inClass = base.inClass,\n                        $currentItem = base.$owlItems.eq(base.currentItem),\n                        $prevItem = base.$owlItems.eq(base.prevItem),\n                        prevPos = Math.abs(base.positionsInArray[base.currentItem]) + base.positionsInArray[base.prevItem],\n                        origin = Math.abs(base.positionsInArray[base.currentItem]) + base.itemWidth / 2,\n                        animEnd = 'webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend';\n\n                base.isTransition = true;\n\n                base.$owlWrapper\n                        .addClass('owl-origin')\n                        .css({\n                            \"-webkit-transform-origin\": origin + \"px\",\n                            \"-moz-perspective-origin\": origin + \"px\",\n                            \"perspective-origin\": origin + \"px\"\n                        });\n                function transStyles(prevPos) {\n                    return {\n                        \"position\": \"relative\",\n                        \"left\": prevPos + \"px\"\n                    };\n                }\n\n                $prevItem\n                        .css(transStyles(prevPos, 10))\n                        .addClass(outClass)\n                        .on(animEnd, function () {\n                            base.endPrev = true;\n                            $prevItem.off(animEnd);\n                            base.clearTransStyle($prevItem, outClass);\n                        });\n\n                $currentItem\n                        .addClass(inClass)\n                        .on(animEnd, function () {\n                            base.endCurrent = true;\n                            $currentItem.off(animEnd);\n                            base.clearTransStyle($currentItem, inClass);\n                        });\n            },\n            clearTransStyle: function (item, classToRemove) {\n                var base = this;\n                item.css({\n                    \"position\": \"\",\n                    \"left\": \"\"\n                }).removeClass(classToRemove);\n\n                if (base.endPrev && base.endCurrent) {\n                    base.$owlWrapper.removeClass('owl-origin');\n                    base.endPrev = false;\n                    base.endCurrent = false;\n                    base.isTransition = false;\n                }\n            },\n            owlStatus: function () {\n                var base = this;\n                base.owl = {\n                    \"userOptions\": base.userOptions,\n                    \"baseElement\": base.$elem,\n                    \"userItems\": base.$userItems,\n                    \"owlItems\": base.$owlItems,\n                    \"currentItem\": base.currentItem,\n                    \"prevItem\": base.prevItem,\n                    \"visibleItems\": base.visibleItems,\n                    \"isTouch\": base.browser.isTouch,\n                    \"browser\": base.browser,\n                    \"dragDirection\": base.dragDirection\n                };\n            },\n            clearEvents: function () {\n                var base = this;\n                base.$elem.off(\".owl owl mousedown.disableTextSelect\");\n                $(document).off(\".owl owl\");\n                $(window).off(\"resize\", base.resizer);\n            },\n            unWrap: function () {\n                var base = this;\n                if (base.$elem.children().length !== 0) {\n                    base.$owlWrapper.unwrap();\n                    base.$userItems.unwrap().unwrap();\n                    if (base.owlControls) {\n                        base.owlControls.remove();\n                    }\n                }\n                base.clearEvents();\n                base.$elem\n                        .attr(\"style\", base.$elem.data(\"owl-originalStyles\") || \"\")\n                        .attr(\"class\", base.$elem.data(\"owl-originalClasses\"));\n            },\n            destroy: function () {\n                var base = this;\n                base.stop();\n                window.clearInterval(base.checkVisible);\n                base.unWrap();\n                base.$elem.removeData();\n            },\n            reinit: function (newOptions) {\n                var base = this,\n                        options = $.extend({}, base.userOptions, newOptions);\n                base.unWrap();\n                base.init(options, base.$elem);\n            },\n            addItem: function (htmlString, targetPosition) {\n                var base = this,\n                        position;\n\n                if (!htmlString) {\n                    return false;\n                }\n\n                if (base.$elem.children().length === 0) {\n                    base.$elem.append(htmlString);\n                    base.setVars();\n                    return false;\n                }\n                base.unWrap();\n                if (targetPosition === undefined || targetPosition === -1) {\n                    position = -1;\n                } else {\n                    position = targetPosition;\n                }\n                if (position >= base.$userItems.length || position === -1) {\n                    base.$userItems.eq(-1).after(htmlString);\n                } else {\n                    base.$userItems.eq(position).before(htmlString);\n                }\n\n                base.setVars();\n            },\n            removeItem: function (targetPosition) {\n                var base = this,\n                        position;\n\n                if (base.$elem.children().length === 0) {\n                    return false;\n                }\n                if (targetPosition === undefined || targetPosition === -1) {\n                    position = -1;\n                } else {\n                    position = targetPosition;\n                }\n\n                base.unWrap();\n                base.$userItems.eq(position).remove();\n                base.setVars();\n            }\n\n        };\n\n        $.fn.owlCarousel = function (options) {\n            return this.each(function () {\n                if ($(this).data(\"owl-init\") === true) {\n                    return false;\n                }\n                $(this).data(\"owl-init\", true);\n                var carousel = Object.create(Carousel);\n                carousel.init(options, this);\n                $.data(this, \"owlCarousel\", carousel);\n            });\n        };\n\n        $.fn.owlCarousel.options = {\n            items: 5,\n            itemsCustom: false,\n            itemsDesktop: [1199, 4],\n            itemsDesktopSmall: [979, 3],\n            itemsTablet: [768, 2],\n            itemsTabletSmall: false,\n            itemsMobile: [479, 1],\n            singleItem: false,\n            itemsScaleUp: false,\n            slideSpeed: 200,\n            paginationSpeed: 800,\n            rewindSpeed: 1000,\n            autoPlay: false,\n            stopOnHover: false,\n            navigation: false,\n            navigationText: [\"prev\", \"next\"],\n            rewindNav: true,\n            scrollPerPage: false,\n            pagination: true,\n            paginationNumbers: false,\n            responsive: true,\n            responsiveRefreshRate: 200,\n            responsiveBaseWidth: window,\n            baseClass: \"owl-carousel\",\n            theme: \"owl-theme\",\n            lazyLoad: false,\n            lazyFollow: true,\n            lazyEffect: \"fade\",\n            autoHeight: false,\n            jsonPath: false,\n            jsonSuccess: false,\n            dragBeforeAnimFinish: true,\n            mouseDrag: true,\n            touchDrag: true,\n            addClassActive: false,\n            transitionStyle: false,\n            beforeUpdate: false,\n            afterUpdate: false,\n            beforeInit: false,\n            afterInit: false,\n            beforeMove: false,\n            afterMove: false,\n            afterAction: false,\n            startDragging: false,\n            afterLazyLoad: false\n        };\n    }(jQuery, window, document));\n});","Solwin_ScrolltoTop/js/scroll.js":"/**\n * Solwin Infotech\n * Solwin ScrolltoTop Extension\n *\n * @category   Solwin\n * @package    Solwin_ScrolltoTop\n * @copyright  Copyright \u00a9 2006-2016 Solwin (https://www.solwininfotech.com)\n * @license    https://www.solwininfotech.com/magento-extension-license/ \n */\n\nrequire(['jquery'], function () {\n    jQuery(document).ready(function () {\n    if (jQuery(\".scrollup\").length > 0) {\n        // scroll-to-top button show and hide\n        jQuery(document).ready(function () {\n            jQuery(window).scroll(function () {\n                if (jQuery(this).scrollTop() > 100) {\n                    jQuery('.scrollup').fadeIn();\n                } else {\n                    jQuery('.scrollup').fadeOut();\n                }\n            });\n            // scroll-to-top animate\n            jQuery('.scrollup').click(function () {\n                jQuery(\"html, body\").animate({scrollTop: 0}, 600);\n                return false;\n            });\n        });\n    }\n});\n});","Vertex_AddressValidation/uiRegistry.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(function () {\n    'use strict';\n\n    return {\n        load: function (name, req, onload, config) {\n            req(['uiRegistry'], function (registry) {\n                let count = 0;\n                let timer = setInterval(function() {\n                    if(typeof(registry.get(name)) !== 'undefined') {\n                        onload(registry.get(name));\n                        clearInterval(timer);\n                    }\n                    count++;\n\n                    if(count >= 10) {\n                        clearInterval(timer);\n                        onload.error(new Error(name + 'never loaded into the registry'));\n                    }\n                }, 500);\n            });\n        }\n    }\n});\n","Vertex_AddressValidation/js/billing-validation-mixin.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'Magento_Checkout/js/checkout-data'\n], function ($, registry, checkoutData) {\n    'use strict';\n\n    return function (Component) {\n        return Component.extend({\n            validationConfig: window.checkoutConfig.vertexAddressValidationConfig,\n            addressValidator: null,\n\n            /**\n             * @returns {Object}\n             */\n            initialize: function () {\n                let self = this;\n                this._super();\n\n                registry.get(\n                    'checkout.steps.billing-step.payment.payments-list' +\n                    '.before-place-order.billingAdditional' +\n                    '.address-validation-message.validator',\n                    function (validator) {\n                        this.addressValidator = validator;\n                    }.bind(this)\n                );\n\n                this.isAddressDetailsVisible.subscribe(function (isVisible) {\n                    self.addressDetailsVisibilityChanged(isVisible);\n                });\n\n                return this;\n            },\n\n            /**\n             * @returns {self}\n             */\n            updateAddress: function () {\n                this.registerAddressInvalidationTrigger();\n\n                var billingData = checkoutData.getBillingAddressFromData();\n\n                if (!this.validationConfig.isAddressValidationEnabled ||\n                    this.addressValidator.isAddressValid ||\n                    billingData === null ||\n                    this.selectedAddress() && !this.isAddressFormVisible() ||\n                    this.validationConfig.countryValidation.indexOf(billingData.country_id) === -1\n                ) {\n                    return this._super();\n                }\n\n                this.addressValidator.addressValidation().done(function () {\n                    if (!this.validationConfig.showValidationSuccessMessage) {\n                        return this.updateAddress();\n                    }\n                }.bind(this));\n            },\n\n            /**\n             * When called, register a single (mind the \"one\") address invalidation trigger,\n             * that sets the \"this.addressValidator.isAddressValid = false\" for any further billing address field change.\n             */\n            registerAddressInvalidationTrigger: function () {\n                let that = this;\n                $('fieldset')\n                    .find('[data-form=\"billing-new-address\"]')\n                    .one(\n                        'keyup change paste',\n                        'input[name^=\"street\"]' +\n                        ', input[name=\"postcode\"]' +\n                        ', input[name=\"city\"]' +\n                        ', input[name=\"country_id\"]' +\n                        ', select[name=\"region_id\"]',\n                        function () {\n                            that.addressValidator.isAddressValid = false;\n                        });\n            },\n\n            /**\n             * If the address details are visible, then remove the validation address warning message\n             *\n             * @param isVisible\n             */\n            addressDetailsVisibilityChanged: function (isVisible) {\n                let message = this.addressValidator.message;\n                if (isVisible && message.hasMessage() && message.message.type === 1) {\n                    message.clear();\n                }\n            }\n        });\n    };\n});\n","Vertex_AddressValidation/js/customer-validation-mixin.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['jquery'], function ($) {\n    'use strict';\n\n    const config = window.vertexAddressValidationConfig || {};\n\n    return function (addressValidation) {\n        if (!config.enabled) {\n            return addressValidation;\n        }\n\n        $.widget('mage.addressValidation', addressValidation, {\n            _vertexValidator: null,\n            _vertexForm: null,\n\n            /**\n             * Initialize widget\n             *\n             * @returns {*}\n             * @private\n             */\n            _create: function () {\n                var result = this._super(),\n                    button = $(this.options.selectors.button, this.element);\n\n                require([\n                    'Vertex_AddressValidation/js/view/customer/address-form',\n                    'Vertex_AddressValidation/js/view/customer/address-validation'\n                ], function (addressForm, addressValidator) {\n                    this._vertexValidator = addressValidator();\n                    this._vertexForm = addressForm;\n\n                    addressForm.initialize(this.element, button);\n                    addressForm.renameSubmitButton(config.validateButtonText);\n                }.bind(this));\n\n                this.element.data('validator').settings.submitHandler = function (form) {\n                    if (this._vertexForm && this._vertexForm.isSaveAsIs) {\n                        this._vertexForm.isSaveAsIs = false;\n                        return this.submitForm(form);\n                    }\n\n                    if (this._vertexValidator && this._vertexForm) {\n                        this._vertexValidator.addressValidation(this._vertexForm.getAddress()).done(this.submitForm.bind(this, form));\n                    }\n                }.bind(this);\n\n                return result;\n            },\n\n            /**\n             * Submit form\n             *\n             * @param {Object} form\n             */\n            submitForm: function (form) {\n                if (this._vertexForm) {\n                    this._vertexForm.disableSubmitButtons();\n                }\n                form.submit();\n            }\n        });\n        return $.mage.addressValidation;\n    };\n});\n","Vertex_AddressValidation/js/definitions.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\n/**\n * @typedef UncleanAddress\n * @api\n * @property {string[]} streetAddress\n * @property {string} city\n * @property {string} mainDivision - Region, State, or Province\n * @property {string} postalCode - ZIP or postal code\n * @property {string} country - 2 or 3 letter country code\n */\n\n/**\n * @typedef CleanAddress\n * @api\n * @property {string[]} streetAddress - street address lines\n * @property {?string} city - name of the city\n * @property {?string} subDivision - name of the sub-division (county, parish)\n * @property {?string} regionName - name of the region (state/province)\n * @property {?int} regionId - numeric (state/province) region identifier in the Magento database\n * @property {?string} postalCode - ZIP+4 or postal code\n * @property {?string} countryCode - 2 letter country code\n * @property {?string} countryName - name of the country\n */\n","Vertex_AddressValidation/js/shipping-invalidate-mixin.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'uiRegistry',\n    'mage/utils/wrapper'\n], function (registry, wrapper) {\n    'use strict';\n\n    var config = window.checkoutConfig.vertexAddressValidationConfig || {};\n\n    return function (target) {\n        if (!config.isAddressValidationEnabled) {\n            return target;\n        }\n\n        var validationMessage = registry.get(\n            'checkout.steps.shipping-step.shippingAddress' +\n            '.before-shipping-method-form.shippingAdditional'\n        );\n\n        target.setSelectedShippingAddress = wrapper.wrap(target.setSelectedShippingAddress, function (original, args) {\n            var addressValidator = registry.get(\n                'checkout.steps.shipping-step.shippingAddress' +\n                '.before-shipping-method-form.shippingAdditional' +\n                '.address-validation-message.validator'\n            );\n\n            addressValidator.isAddressValid = false;\n            validationMessage.clear();\n\n            return original(args);\n        });\n\n        return target;\n    }\n});\n","Vertex_AddressValidation/js/shipping-validation-mixin.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'uiRegistry',\n    'Magento_Checkout/js/model/quote'\n], function (registry, quote) {\n    'use strict';\n\n    return function (Component) {\n        return Component.extend({\n            validationConfig: window.checkoutConfig.vertexAddressValidationConfig,\n            shippingData: null,\n            addressValidator: null,\n\n            /**\n             * @returns {Object}\n             */\n            initialize: function () {\n                this._super();\n\n                registry.get(\n                    'checkout.steps.shipping-step.shippingAddress' +\n                    '.before-shipping-method-form.shippingAdditional' +\n                    '.address-validation-message.validator',\n                    function (validator) {\n                        this.addressValidator = validator;\n                    }.bind(this)\n                );\n\n                this.shippingData = quote.shippingAddress();\n                return this;\n            },\n\n            /**\n             * @return {Boolean}\n             */\n            validateShippingInformation: function () {\n                var superResult = this._super();\n\n                // Proceed with saving the address\n                if (!this.validationConfig.isAddressValidationEnabled ||\n                    !superResult ||\n                    this.addressValidator.isAddressValid ||\n                    !quote.shippingAddress().isEditable() ||\n                    this.validationConfig.countryValidation.indexOf(this.shippingData.countryId) === -1\n                ) {\n                    this.addressValidator.message.clear();\n                    return superResult;\n                }\n\n                // Run address validation\n                if (superResult) {\n                    this.addressValidator.addressValidation().done(function () {\n                        if (!this.validationConfig.showValidationSuccessMessage) {\n                            this.setShippingInformation();\n                        }\n                    }.bind(this));\n\n                    return false;\n                }\n                return superResult;\n            }\n        });\n    };\n});\n","Vertex_AddressValidation/js/validation-messages.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\ndefine(['mage/translate'], function ($t) {\n    'use strict';\n\n    /**\n     * Messages here may not be the final version.  Please check the module's\n     * i18n.csv file for final english versions.\n     *\n     * Messages are kept here as-is for backwards compatibility with translations\n     */\n    return {\n        noChangesNecessary: $t('The address is valid'),\n        noAddressFound: $t('We did not find a valid address'),\n        changesFound: $t('The address is not valid'),\n        adminChangesFound: $t('The intended address could be:'),\n        addressUpdated: $t('The address was updated'),\n        streetAddressUpdateWarning: $t('Warning: Updating the address will replace all street address fields.')\n    };\n})\n","Vertex_AddressValidation/js/action/address-validation-request.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'mage/storage',\n    'Vertex_AddressValidation/js/model/url-builder'\n], function (\n    storage,\n    urlBuilder\n) {\n    'use strict';\n\n    /**\n     * Cleanse an Address\n     *\n     * @param {UncleanAddress} address\n     */\n    return function (address) {\n        let url = '/address/cleanse';\n        const params = {address: address};\n\n        if (window.checkoutConfig && window.checkoutConfig.isCustomerLoggedIn === false) {\n            url = '/guest-address/cleanse';\n            params.cartId = window.checkoutConfig.quoteId;\n        }\n\n        return storage.post(\n            urlBuilder.createUrl(url, {}),\n            JSON.stringify(params)\n        );\n    };\n});\n","Vertex_AddressValidation/js/action/build-quote-address.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([], function () {\n    'use strict';\n\n    /**\n     * Convert a Cleansed Address to a Magento Quote Address object\n     *\n     * @param {CleanAddress} address\n     * @returns {Object} quoteAddress\n     */\n    return function (address) {\n        return {\n            street: address.street_address,\n            city: address.city,\n            region: address.region_name,\n            region_id: address.region_id,\n            postcode: address.postal_code,\n            country_id: address.country_code\n        }\n    }\n})\n","Vertex_AddressValidation/js/action/convert-quote-address.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['uiRegistry'], function (registry) {\n    'use strict';\n\n    /**\n     * Convert a Magento Quote or Customer Address to an unclean address\n     *\n     * In most instances, the caller will need to set the region property on the address object.\n     *\n     * @param {Object} address\n     * @returns {UncleanAddress}\n     */\n    return function (address) {\n        const streetAddress = [];\n\n        for (let i in address.street) {\n            if (!address.street.hasOwnProperty(i)) {\n                continue;\n            }\n            if (address.street[i].length > 0) {\n                streetAddress.push(address.street[i]);\n            }\n        }\n\n        let countryId;\n        if (typeof address.countryId !== 'undefined') {\n            countryId = address.countryId;\n        } else if (typeof address.country_id !== 'undefined') {\n            countryId = address.country_id;\n        }\n\n        return {\n            street_address: streetAddress,\n            city: address.city,\n            main_division: address.region,\n            postal_code: address.postcode,\n            country: countryId\n        };\n    };\n});\n","Vertex_AddressValidation/js/model/address-difference-template-renderer.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['underscore', 'uiClass'], function (_, Component) {\n    'use strict';\n\n    /**\n     * @typedef {Object} vertexDifferenceRendererObject\n     * @property {vertexDifferenceObject_Message} message\n     */\n\n    /**\n     * @typedef {Object} vertexDifferenceObject_Message\n     * @property {string} text - Informative message to end user\n     * @property {vertexDifferenceObject_Difference[]} differences - Array of differences\n     */\n\n    /**\n     * @typedef {Object} vertexDifferenceObject_Difference\n     * @property {string} name - Human readable name of field that has a difference\n     * @property {string} value - New value for the field\n     */\n\n    /**\n     * @api\n     */\n    return Component.extend({\n        /**\n         * @var {string} template - Location of file to render\n         */\n        template: 'Vertex_AddressValidation/template/validation-result.html',\n\n        /**\n         * @var {*} renderer - Underscore.js template object\n         */\n        renderer: null,\n\n        /**\n         * @constructor\n         * @param {string} template - File to render\n         * @returns {*}\n         */\n        initialize: function (template) {\n            if (typeof this.template !== 'undefined') {\n                this.template = template;\n            }\n\n            require(['text!' + this.template], function (templateContents) {\n                this.renderer = _.template(templateContents);\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * @param {vertexDifferenceRendererObject} message\n         * @returns {string} HTML\n         */\n        render: function (message) {\n            return this.renderer(message);\n        }\n    });\n});\n","Vertex_AddressValidation/js/model/difference-determiner.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['mage/translate'], function ($t) {\n    'use strict';\n\n    /**\n     * @typedef VertexAddressReadableDifference\n     * @property {string} type - Type of difference (used for code)\n     * @property {string} name - Human readable name of the item that has changed\n     * @property {(string|string[])} value - Human readable value of the item that has changed\n     * @property {(string|string[])} rawValue - Script usable value of the item that has changed\n     */\n\n    /**\n     * @param {UncleanAddress} uncleanAddress\n     * @param {CleanAddress} cleanAddress\n     * @returns {boolean}\n     */\n    function streetAddressesAreDifferent(uncleanAddress, cleanAddress) {\n        uncleanAddress.street_address.filter(function (val) {\n            // Filter out empty strings\n            return val.length > 0;\n        });\n\n        if (uncleanAddress.street_address.length !== cleanAddress.street_address.length) {\n            return true;\n        }\n        for(let index = 0,length = uncleanAddress.street_address.length;index < length;++index) {\n            if (uncleanAddress.street_address[index] !== cleanAddress.street_address[index]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param {UncleanAddress} uncleanAddress\n     * @param {CleanAddress} cleanAddress\n     * @returns {VertexAddressReadableDifference[]}\n     */\n    return function (uncleanAddress, cleanAddress) {\n        const listedDifferences = [];\n        if (streetAddressesAreDifferent(uncleanAddress, cleanAddress)) {\n            listedDifferences.push({type: 'street', name: $t('Street Address'), value: cleanAddress.street_address, rawValue: cleanAddress.street_address});\n        }\n        if (uncleanAddress.city !== cleanAddress.city) {\n            listedDifferences.push({type: 'city', name: $t('City'), value: cleanAddress.city, rawValue: cleanAddress.city});\n        }\n        if (uncleanAddress.main_division !== cleanAddress.region_name) {\n            listedDifferences.push({type: 'region', name: $t('State/Province'), value: cleanAddress.region_name, rawValue: cleanAddress.region_id});\n        }\n        if (uncleanAddress.postal_code !== cleanAddress.postal_code) {\n            listedDifferences.push({type: 'postcode', name: $t('Zip/Postal Code'), value: cleanAddress.postal_code, rawValue: cleanAddress.postal_code});\n        }\n        if (uncleanAddress.country !== cleanAddress.country_code) {\n            listedDifferences.push({type: 'country', name: $t('Country'), value: cleanAddress.country_name, rawValue: cleanAddress.country_code});\n        }\n        return listedDifferences;\n    };\n});\n","Vertex_AddressValidation/js/model/url-builder.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    var config = window.checkoutConfig || window.vertexAddressValidationConfig || {};\n\n    return {\n        method: 'rest',\n        storeCode: config.storeCode,\n        version: 'V1',\n        serviceUrl: ':method/:storeCode/:version',\n\n        /**\n         * @param {String} url\n         * @param {Object} params\n         * @return {*}\n         */\n        createUrl: function (url, params) {\n            var completeUrl = this.serviceUrl + url;\n            return this.bindParams(completeUrl, params);\n        },\n\n        /**\n         * @param {String} url\n         * @param {Object} params\n         * @return {*}\n         */\n        bindParams: function (url, params) {\n            var urlParts;\n\n            params.method = this.method;\n            params.storeCode = this.storeCode;\n            params.version = this.version;\n\n            urlParts = url.split('/');\n            urlParts = urlParts.filter(Boolean);\n\n            $.each(urlParts, function (key, part) {\n                part = part.replace(':', '');\n\n                if (params[part] !== undefined) {\n                    urlParts[key] = params[part];\n                }\n            });\n\n            return urlParts.join('/');\n        }\n    };\n});\n","Vertex_AddressValidation/js/model/checkout/billing/address-resolver.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'Magento_Customer/js/model/address-list',\n    'Vertex_AddressValidation/js/model/customer/address-resolver'\n], function ($, registry, addressList, addressResolver) {\n    'use strict';\n\n    addressResolver = $.extend({}, addressResolver, {\n        updateFields: function (element, value) {\n            if (element.name === 'street') {\n                const streetInputs = $('.payment-method input[name^=\"street[\"]');\n                streetInputs.val('');\n                if (typeof value === 'string') {\n                    $(streetInputs[0]).val(value);\n                } else {\n                    for (let index = 0, length = value.length;index < length;++index) {\n                        $(streetInputs[index])\n                            .val(value[index]);\n                    }\n                }\n                streetInputs.trigger('change').trigger('blur');\n            } else {\n                $('.payment-method input[name=\"' + element.name + '\"]')\n                    .val(value)\n                    .trigger('change')\n                    .trigger('blur');\n            }\n        }\n    });\n    return addressResolver;\n});\n","Vertex_AddressValidation/js/model/checkout/shipping/address-resolver.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'Magento_Customer/js/model/address-list',\n    'Vertex_AddressValidation/js/model/customer/address-resolver',\n    'Magento_Checkout/js/action/create-shipping-address',\n    'Magento_Checkout/js/checkout-data'\n], function ($, registry, addressList, addressResolver, createShippingAddress, checkoutData) {\n    'use strict';\n\n    addressResolver = $.extend({}, addressResolver, {\n        checkoutProvider: registry.get('checkoutProvider'),\n\n        updateFields: function (element, value) {\n            var addressData = $.extend({}, this.checkoutProvider.get('shippingAddress'));\n\n            if (element.name === 'street') {\n                // Just updating the addressData element doesn't seem to work on street inputs\n                const streetInputs = $('.form-shipping-address input[name^=\"street[\"]');\n                streetInputs.val('');\n                for(let index = 0, length = addressData[element.name].length;index < length;++index) {\n                    addressData[element.name][index] = typeof value[index] !== 'undefined' ? value[index] : '';\n                    $(streetInputs[index])\n                        .val(addressData[element.name][index]);\n                }\n            } else {\n                addressData[element.name] = value;\n            }\n\n            this.checkoutProvider.set('shippingAddress', addressData);\n            this.checkoutProvider.trigger('shippingAddress', addressData);\n\n            // Update address list containers\n            createShippingAddress(addressData);\n            checkoutData.setNewCustomerShippingAddress($.extend(true, {}, addressData));\n        }\n    });\n    return addressResolver;\n});\n","Vertex_AddressValidation/js/model/customer/address-resolver.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'underscore'\n], function ($, _) {\n    'use strict';\n\n    return {\n        addressFieldsForValidation: ['city', 'postcode', 'street'],\n        responseAddressData: {},\n        formAddressData: {},\n\n        /**\n         * Will check if the response is different, same or invalid\n         *\n         * @param {Object} responseAddressData\n         * @param {Object} formAddressData\n         * @returns {Boolean|Array}\n         */\n        resolveAddressDifference: function (responseAddressData, formAddressData) {\n            var differences = [],\n                valid = [];\n\n            this.responseAddressData = responseAddressData;\n            this.formAddressData = formAddressData;\n\n            if (this.invalidErrorResponse(responseAddressData)) {\n                return [];\n            }\n\n            _.each(this.addressFieldsForValidation, function (v, i) {\n                var responseValue, value, name, isComplex,\n                    complexValues = [],\n                    isDifferent = false;\n\n                isComplex = _.isObject(formAddressData[v]) || _.isArray(formAddressData[v]);\n\n                if (responseAddressData[v] !== formAddressData[v]) {\n                    if (isComplex) {\n                        _.each(formAddressData[v], function (val, index) {\n                            if (val && responseAddressData[v][index] && val !== responseAddressData[v][index]) {\n                                complexValues[index] = responseAddressData[v][index];\n                                isDifferent = true;\n                            }\n                        });\n                    }\n\n                    if (!isDifferent && isComplex) {\n                        valid.push(v);\n                    }\n\n                    responseValue = responseAddressData[v];\n                    if (complexValues.length) {\n                        responseValue = complexValues.join(', ');\n                    }\n\n                    if (!complexValues.length && _.isArray(responseValue) || responseValue === null) {\n                        return;\n                    }\n\n                    value = responseValue.substr(0, 1).toUpperCase() + responseValue.substr(1);\n                    name = v.substr(0, 1).toUpperCase() + v.substr(1);\n                    differences.push({\n                        value: value,\n                        name: name\n                    });\n\n                    return;\n                }\n                valid[i] = v;\n            });\n\n            if (valid.length === this.addressFieldsForValidation.length && _.isEmpty(differences)) {\n                return true;\n            }\n            return differences;\n        },\n\n        /**\n         * Updates form inputs with the values from the API response\n         *\n         * @returns {*}\n         */\n        resolveAddressUpdate: function () {\n            var responseAddressData = this.responseAddressData,\n                formAddressData = this.formAddressData,\n                self = this;\n\n            _.each(this.addressFieldsForValidation, function (v) {\n                var fieldValue = responseAddressData[v],\n                    linesObj = {};\n\n                if (_.isObject(formAddressData[v])) {\n                    _.each(formAddressData[v], function (val, i) {\n                        if (fieldValue[i]) {\n                            linesObj[i] = fieldValue[i];\n                            self.updateFields({name: v, key: i}, fieldValue[i]);\n\n                            return;\n                        }\n                        linesObj[i] = val;\n                    });\n                    formAddressData[v] = linesObj;\n                    return;\n                }\n\n                formAddressData[v] = fieldValue;\n                self.updateFields({name: v}, fieldValue);\n            });\n\n            return formAddressData;\n        },\n\n        /**\n         * Update validated fields\n         *\n         * @param {Object} element\n         * @param {String} value\n         */\n        updateFields: function (element, value) {\n            if (element.key !== undefined) {\n                $('input[name=\"' + element.name + '[]\"]').eq(element.key).val(value).trigger('change');\n            } else {\n                $('input[name=\"' + element.name + '\"]').val(value).trigger('change');\n            }\n        },\n\n        /**\n         * Will check if the api response found a address\n         *\n         * @param {Object} responseData\n         * @returns {Boolean}\n         */\n        invalidErrorResponse: function (responseData) {\n            _.each(this.addressFieldsForValidation, function (v) {\n                if (_.isArray(responseData[v]) && responseData[v][0] === '') {\n                    return true;\n                }\n\n                if (responseData[v] === null) {\n                    return true;\n                }\n            });\n            return false;\n        }\n    };\n});\n","Vertex_AddressValidation/js/view/validation-message.js":"define([\n    'ko',\n    'uiComponent',\n    'Vertex_AddressValidation/js/model/address-difference-template-renderer',\n    'Vertex_AddressValidation/js/validation-messages'\n], function (ko, Component, differenceRenderer, validationMessages) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Vertex_AddressValidation/validation-message',\n            cleanseAddressTemplate: 'Vertex_AddressValidation/template/validation-result.html',\n            showSuccessMessage: false,\n            message: {},\n            address: null,\n            hasMessage: false,\n            tracks: {\n                showSuccessMessage: true,\n                message: true\n            }\n        },\n\n        templateRenderer: null,\n\n        initialize: function () {\n            this._super();\n            this.templateRenderer = new differenceRenderer(this.cleanseAddressTemplate);\n            return this;\n        },\n\n        /**\n         * Initializes observable properties.\n         *\n         * @returns {Model} Chainable.\n         */\n        initObservable: function () {\n            this.address = ko.observable();\n\n            this.hasMessage = ko.pureComputed(function() {\n                return this._objectHasEntries(this.message);\n            }.bind(this));\n\n            this.renderedTemplate = ko.pureComputed(function () {\n                const templateVariables = {\n                    message: {\n                        text: this.message.text,\n                        differences: this.message.differences\n                    },\n                    address: this.address()\n                };\n\n                for (let index = 0,length = this.message.differences.length;index < length;++index) {\n                    if (this.message.differences[index].type === 'street') {\n                        templateVariables.warning = validationMessages.streetAddressUpdateWarning;\n                        break;\n                    }\n                }\n\n                return this.templateRenderer.render(templateVariables);\n            }.bind(this));\n\n            return this._super();\n        },\n\n\n        /**\n         * Sets a success message\n         *\n         * @param {String} text\n         * @param {Object} differences\n         */\n        setSuccessMessage: function (text, differences) {\n            this.setMessage(0, 'message success', text, differences || []);\n        },\n\n        /**\n         * Sets a warning message\n         *\n         * @param {String} text\n         * @param {Object} differences\n         * @param {CleanAddress} address\n         */\n        setWarningMessage: function (text, differences, address) {\n            this.address(address || {});\n            this.setMessage(1, 'message warning', text, differences || []);\n        },\n\n        /**\n         * Sets a message\n         *\n         * @param {Integer} type\n         * @param {String} cssClass\n         * @param {String} text\n         * @param {Object} differences\n         */\n        setMessage: function (type, cssClass, text, differences) {\n            this.message = {\n                type: type,\n                text: text,\n                class: cssClass || '',\n                differences: differences || []\n            };\n        },\n\n        /**\n         * Returns if message exists\n         *\n         * @returns {Boolean}\n         */\n        hasMessage: function () {\n            return ko.computed(function () {\n                return this._objectHasEntries(this.message);\n            }.bind(this));\n        },\n\n        /**\n         * Returns message\n         *\n         * {Object}\n         */\n        clear: function () {\n            this.message = {};\n        },\n\n        /**\n         * Return whether or not the object has any entries\n         *\n         * Object.entries is not supported by IE11 or Opera Mini.\n         * Writing a quick method to serve the same purpose was easier than\n         * importing a shim.\n         *\n         * @param {Object} object\n         * @returns {boolean}\n         * @private\n         */\n        _objectHasEntries: function(object) {\n            if (typeof Object.entries !== 'undefined') {\n                return Object.entries(object).length !== 0;\n            }\n            for (let key in object) {\n                if (object.hasOwnProperty(key)) {\n                    return true;\n                }\n            }\n        },\n    });\n});\n","Vertex_AddressValidation/js/view/checkout/billing/address-validation.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'Vertex_AddressValidation/js/view/checkout/shipping/address-validation',\n    'Vertex_AddressValidation/js/model/checkout/billing/address-resolver',\n    'Magento_Checkout/js/checkout-data',\n    'uiRegistry'\n], function (\n    Component,\n    addressResolver,\n    checkoutData,\n    registry\n) {\n    'use strict';\n\n    return Component.extend({\n        resolver: addressResolver,\n\n        /**\n         * @returns {Object}\n         */\n        getFormData: function () {\n            const formData = checkoutData.getBillingAddressFromData(),\n                checkoutProvider = registry.get('checkoutProvider');\n\n            if (checkoutProvider && checkoutProvider.dictionaries && checkoutProvider.dictionaries.region_id) {\n                const region = registry.get('checkoutProvider').dictionaries.region_id.find(function (obj) {\n                    return obj.value === formData.region_id;\n                });\n                if (region && region.label) {\n                    formData.region = region.label;\n                }\n            }\n\n            return formData;\n        }\n    });\n});\n","Vertex_AddressValidation/js/view/checkout/shipping/address-validation.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'uiComponent',\n    'Vertex_AddressValidation/js/action/address-validation-request',\n    'Vertex_AddressValidation/js/model/checkout/shipping/address-resolver',\n    'Magento_Checkout/js/model/full-screen-loader',\n    'Magento_Checkout/js/checkout-data',\n    'Magento_Checkout/js/model/error-processor',\n    'Magento_Ui/js/model/messageList',\n    'Vertex_AddressValidation/js/validation-messages',\n    'Vertex_AddressValidation/js/action/convert-quote-address',\n    'Vertex_AddressValidation/js/action/build-quote-address',\n    'Vertex_AddressValidation/js/model/difference-determiner'\n], function (\n    $,\n    registry,\n    Component,\n    addressValidationRequest,\n    addressResolver,\n    fullScreenLoader,\n    checkoutData,\n    errorProcessor,\n    messageContainer,\n    validationMessages,\n    convertQuoteAddress,\n    buildQuoteAddress,\n    differenceDeterminer\n) {\n    'use strict';\n\n    return Component.extend({\n        validationConfig: window.checkoutConfig.vertexAddressValidationConfig || {},\n        resolver: addressResolver,\n        isAddressValid: false,\n        message: null,\n        defaults: {\n            listens: {\n                addressData: 'addressUpdated'\n            },\n            imports: {\n                addressData: '${ $.provider }:shippingAddress'\n            }\n        },\n\n        /**\n         * Reset validation after address update\n         */\n        addressUpdated: function () {\n            this.isAddressValid = false;\n            this.updateAddress = false;\n\n            if (this.message) {\n                this.message.clear();\n                this.message.showSuccessMessage = false;\n            }\n        },\n\n        /**\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super();\n            this.message = registry.get(this.parentName);\n\n            return this;\n        },\n\n        /**\n         * @returns {Object}\n         */\n        getFormData: function () {\n            const formData = checkoutData.getShippingAddressFromData(),\n                checkoutProvider = registry.get('checkoutProvider');\n\n            if (checkoutProvider && checkoutProvider.dictionaries && checkoutProvider.dictionaries.region_id) {\n                const region = registry.get('checkoutProvider').dictionaries.region_id.find(function (obj) {\n                    return obj.value === formData.region_id;\n                });\n                if (region && region.label) {\n                    formData.region = region.label;\n                }\n            }\n\n            return formData;\n        },\n\n        /**\n         * Triggers a request to the address validation builder and adds the response\n         */\n        addressValidation: function () {\n            var deferred = $.Deferred();\n            this.isAddressValid = false;\n            fullScreenLoader.startLoader();\n\n            addressValidationRequest(convertQuoteAddress(this.getFormData()))\n                .done(function (response) {\n                    this.isAddressValid = true;\n                    if (this.handleAddressDifferenceResponse(response) === true) {\n                        deferred.resolve();\n                    }\n                }.bind(this)).fail(function (response) {\n                errorProcessor.process(response, messageContainer);\n            }).always(function () {\n                fullScreenLoader.stopLoader();\n            });\n\n            return deferred;\n        },\n\n        /**\n         * Get the message with the differences\n         *\n         * @param {?CleanAddress} response\n         */\n        handleAddressDifferenceResponse: function (response) {\n            if (response === null || !Object.keys(response).length) {\n                this.message.setWarningMessage(validationMessages.noAddressFound);\n                return;\n            }\n\n            this.resolver.responseAddressData = buildQuoteAddress(response);\n\n            const differences = differenceDeterminer(convertQuoteAddress(this.getFormData()), response),\n                showSuccessMessage = this.validationConfig.showValidationSuccessMessage || false;\n\n            if (differences.length === 0 && showSuccessMessage) {\n                this.message.setSuccessMessage(validationMessages.noChangesNecessary);\n            } else if (differences.length > 0) {\n                this.message.setWarningMessage(validationMessages.changesFound, differences, response);\n            } else {\n                return true;\n            }\n        },\n\n        /**\n         * Get the update message\n         */\n        updateVertexAddress: function () {\n            this.resolver.resolveAddressUpdate();\n\n            this.message.setSuccessMessage(validationMessages.addressUpdated);\n            this.isAddressValid = true;\n        }\n    });\n});\n","Vertex_AddressValidation/js/view/customer/address-form.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'underscore',\n    'Vertex_AddressValidation/js/model/customer/address-resolver'\n], function ($, ko, _, addressResolver) {\n    'use strict';\n\n    const config = window.vertexAddressValidationConfig || {};\n\n    return {\n        form: {},\n        button: {},\n        saveAsIsButton: {},\n        formUpdated: ko.observable(false),\n        isSaveAsIs: false,\n\n        /**\n         * Initialize address form object\n         *\n         * @param {Object} form\n         * @param {Object} button\n         */\n        initialize: function (form, button) {\n            var self = this,\n                fieldsToValidate = _.clone(addressResolver.addressFieldsForValidation);\n\n            this.form = form || {};\n            this.button = button || {};\n\n            fieldsToValidate.push('country_id');\n            fieldsToValidate.forEach(function (name) {\n                self.getFieldByName(name).on('input', function () {\n                    self.formUpdated(true);\n                });\n            });\n        },\n\n        /**\n         * Return jQuery object by name\n         *\n         * @param {String} name\n         */\n        getFieldByName: function (name) {\n            return this.form.find('[name=%s]'.replace('%s', name));\n        },\n\n        /**\n         * Rename form button value\n         *\n         * @param {String} value\n         */\n        renameSubmitButton: function (value, button) {\n            var button = button || this.button;\n            var buttonValue = $(button.html()).html(value);\n            button.html(buttonValue).attr('title', value);\n        },\n\n        /**\n         * Show 'Save As Is' button\n         */\n        showSaveAsIsButton: function () {\n            if (!_.isEmpty(this.saveAsIsButton)) {\n                this.saveAsIsButton.show();\n                return;\n            }\n\n            this.saveAsIsButton = $('<button/>', {\n                text: config.saveAsIsButtonText || '',\n                class: 'action save vertex-secondary',\n                'data-action': 'save-as-is-address',\n                click: function () {\n                    this.isSaveAsIs = true;\n                }.bind(this)\n            });\n\n            this.saveAsIsButton.insertAfter(this.button);\n        },\n\n        /**\n         * Hide 'Save As Is' button\n         */\n        hideSaveAsIsButton: function () {\n            if (!_.isEmpty(this.saveAsIsButton)) {\n                this.saveAsIsButton.hide();\n            }\n        },\n\n        /**\n         * Disable form submit buttons\n         */\n        disableSubmitButtons: function () {\n            this.button.attr('disabled', true);\n\n            if (!_.isEmpty(this.saveAsIsButton)) {\n                this.saveAsIsButton.attr('disabled', true);\n            }\n        },\n\n        /**\n         * Retrieves form address and converts it to customer address\n         *\n         * @returns {UncleanAddress}\n         */\n        getAddress: function () {\n            const address = {},\n                city = this.form.find('input[name=\"city\"]').val(),\n                streetAddress = this.form.find('input[name=\"street[]\"]')\n                    .map(function (index, element) {\n                        return $(element).val();\n                    })\n                    .toArray()\n                    .filter(function (value) {\n                        return value.length > 0;\n                    }),\n                mainDivisionValue = this.form.find('select[name=\"region_id\"]').val(),\n                mainDivision = this.form.find('select[name=\"region_id\"] option[value=\"' + mainDivisionValue + '\"]').text(),\n                postalCode = this.form.find('input[name=\"postcode\"]').val(),\n                country = this.form.find('select[name=\"country_id\"]').val();\n\n            address.street_address = streetAddress;\n            if (city.length > 0) {\n                address.city = city;\n            }\n            if (mainDivisionValue.length > 0) {\n                address.main_division = mainDivision;\n            }\n            if (postalCode.length > 0) {\n                address.postal_code = postalCode;\n            }\n            address.country = country;\n\n            return address;\n        },\n\n        updateAddress: function (differences) {\n            for (let index = 0, length = differences.length;index < length;++index) {\n                let difference = differences[index];\n                switch (difference.type) {\n                    case 'street':\n                        this.form.find('input[name=\"street[]\"]').val('');\n                        for (\n                            let streetIndex = 0, streetLength = difference.rawValue.length;\n                            streetIndex < streetLength;\n                            ++streetIndex\n                        ) {\n                            $(this.form.find('input[name=\"street[]\"]')[streetIndex])\n                                .val(difference.rawValue[streetIndex])\n                                .trigger('change')\n                                .trigger('blur');\n                        }\n                        break;\n                    case 'city':\n                        this.form.find('input[name=\"city\"]')\n                            .val(difference.rawValue)\n                            .trigger('change')\n                            .trigger('blur');\n                        break;\n                    case 'region':\n                        this.form.find('select[name=\"region_id\"]')\n                            .val(difference.rawValue)\n                            .trigger('change')\n                            .trigger('blur');\n                        break;\n                    case 'postcode':\n                        this.form.find('input[name=\"postcode\"]')\n                            .val(difference.rawValue)\n                            .trigger('change')\n                            .trigger('blur');\n                        break;\n                    case 'country':\n                        this.form.find('select[name=\"country_id\"]')\n                            .val(difference.rawValue)\n                            .trigger('change')\n                            .trigger('blur');\n                        break;\n                }\n            }\n        },\n\n        /**\n         * Start loader\n         */\n        startLoader: function () {\n            $('body').trigger('processStart');\n        },\n\n        /**\n         * Stop loader\n         */\n        stopLoader: function () {\n            $('body').trigger('processStop');\n        }\n    };\n});\n","Vertex_AddressValidation/js/view/customer/address-validation.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'uiRegistry',\n    'uiComponent',\n    'Vertex_AddressValidation/js/validation-messages',\n    'Vertex_AddressValidation/js/action/address-validation-request',\n    'Vertex_AddressValidation/js/model/customer/address-resolver',\n    'Vertex_AddressValidation/js/view/validation-message',\n    'Vertex_AddressValidation/js/view/customer/address-form',\n    'Vertex_AddressValidation/js/model/difference-determiner',\n    'Vertex_AddressValidation/uiRegistry!addressValidationMessage'\n], function (\n    $,\n    ko,\n    registry,\n    Component,\n    validationMessages,\n    addressValidationRequest,\n    addressResolver,\n    message,\n    addressForm,\n    differenceDeterminer,\n    addressValidationMessage\n) {\n    'use strict';\n\n    var config = window.vertexAddressValidationConfig || {};\n\n    return Component.extend({\n        message: null,\n        formAddressData: null,\n        isAddressValid: false,\n        updateAddress: false,\n        addressResolver: addressResolver,\n        correctAddress: null,\n\n        initialize: function () {\n            this._super();\n\n            this.message = addressValidationMessage;\n            addressForm.formUpdated.extend({notify: 'always'}).subscribe(this.addressUpdated.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Reset validation after address update\n         */\n        addressUpdated: function () {\n            addressForm.renameSubmitButton(config.validateButtonText);\n            addressForm.hideSaveAsIsButton();\n            this.isAddressValid = false;\n            this.updateAddress = false;\n            this.message.clear();\n            this.message.showSuccessMessage = false;\n        },\n\n        /**\n         * Triggers a request to the address validation builder and adds the response\n         *\n         * @param {Object} formAddressData\n         * @returns {Object}\n         */\n        addressValidation: function (formAddressData) {\n            var deferred = $.Deferred();\n\n            if (this.isAddressValid || !this.validateCountry()) {\n                if (this.updateAddress) {\n                    this.updateVertexAddress();\n                }\n                return deferred.resolve();\n            }\n\n            this.formAddressData = formAddressData;\n            addressForm.startLoader();\n\n            addressValidationRequest(formAddressData)\n                .done(function (response) {\n                    this.isAddressValid = true;\n                    this.correctAddress = response;\n                    if (this.handleAddressDifferenceResponse(response) === true) {\n                        deferred.resolve();\n                    } else {\n                        addressForm.stopLoader();\n                    }\n                }.bind(this)).fail(function () {\n                deferred.reject();\n            }).fail(function () {\n                addressForm.stopLoader();\n            });\n\n            return deferred;\n        },\n\n        /**\n         * Check if country is used in validation\n         *\n         * @returns {boolean}\n         */\n        validateCountry: function () {\n            var countryCode = addressForm.getFieldByName('country_id').val();\n\n            return countryCode !== undefined\n                ? config.countryValidation.includes(countryCode)\n                : true;\n        },\n\n        /**\n         * Get the message with the differences\n         *\n         * @param {?CleanAddress} response\n         */\n        handleAddressDifferenceResponse: function (response) {\n            if (response === null || !Object.keys(response).length) {\n                addressForm.renameSubmitButton(config.saveAsIsButtonText);\n                this.message.setWarningMessage(validationMessages.noAddressFound);\n                return;\n            }\n\n            const differences = differenceDeterminer(this.formAddressData, response);\n\n            if (differences.length === 0 && config.showSuccessMessage) {\n                this.message.showSuccessMessage = true;\n                return true;\n            } else if (differences.length > 0) {\n                this.updateAddress = true;\n                addressForm.renameSubmitButton(config.updateButtonText);\n                addressForm.showSaveAsIsButton();\n                this.message.setWarningMessage(validationMessages.changesFound, differences, response);\n            } else {\n                return true;\n            }\n        },\n\n        /**\n         * Get the update message\n         */\n        updateVertexAddress: function () {\n            addressForm.updateAddress(differenceDeterminer(this.formAddressData, this.correctAddress));\n            this.message.setSuccessMessage(validationMessages.addressUpdated);\n\n            if (config.showSuccessMessage) {\n                this.message.showSuccessMessage = true;\n            }\n        }\n    });\n});\n","Vertex_Tax/js/form/depend-field-checker.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n], function ($) {\n    'use strict';\n\n    return {\n        /**\n         * Makes sure a value is set if its depending field is also set.\n         *\n         * @param dependField\n         * @param valueCheck\n         * @returns {boolean}\n         */\n        validateValues : function (dependField, valueCheck) {\n            if ($(dependField).length) {\n                let dependValue = $(dependField).val();\n\n                return !(dependValue && !valueCheck);\n            }\n\n            return true;\n        }\n    };\n});\n","Vertex_Tax/js/form/element/custom-option-flex-field-select.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['underscore', 'Magento_Ui/js/form/element/select'], function (_, Select) {\n    'use strict';\n\n    return Select.extend({\n        /**\n         * Overwrites the parent's filter to allow for checking if a value is\n         * in an array and for allowing the value of \"unmapped\" through all\n         * filters\n         *\n         * @param {String} value\n         * @param {String} field\n         */\n        filter: function (value, field) {\n            var source = this.initialOptions,\n                result;\n\n            field = field || this.filterBy.field;\n\n            result = _.filter(source, function (item) {\n                return Array.isArray(item[field]) && item[field].includes(value) ||\n                    item[field] === value ||\n                    item.value === '' ||\n                    item.value === 'unmapped';\n            });\n\n            this.setOptions(result);\n        }\n    });\n});\n","Vertex_Tax/js/model/customer-country-validation.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'Vertex_Tax/js/form/depend-field-checker',\n    'jquery/validate',\n    'mage/translate'\n], function ($, dependFieldChecker) {\n    'use strict';\n\n    /**\n     * Validates if customer added a VAT number, then selecting a Country is required.\n     */\n    return function (config) {\n        $.validator.addMethod(\n            \"vertex-customer-country\",\n            function (value, element, dependField) {\n                return dependFieldChecker.validateValues(dependField, value);\n            },\n            $.mage.__(\"Please select a Country.\")\n        );\n    }\n});\n","Vertex_Tax/js/model/set-checkout-messages.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(\n    [\n        'underscore',\n        'Magento_Customer/js/customer-data',\n        'Magento_Ui/js/model/messageList'\n    ],\n    function (_, customerData, messageContainer) {\n        'use strict';\n\n        /**\n         * A utility for observing message updates in session storage. It is designed to subscribe to\n         * customer data updates and forward messages to the appropriate messageList model.\n         */\n        return function () {\n            var typeMap = {\n                    'success': 'addSuccessMessage',\n                    'warning': 'addErrorMessage',\n                    'error': 'addErrorMessage'\n                },\n\n                /**\n                 * Observe message section data changes and forward to the error processor.\n                 * @param {Object} data - The observable payload.\n                 * @return void\n                 */\n                messageSubscriptionCallback = function (data) {\n                    if ('messages' in data) {\n                        _.each(data.messages, function (message) {\n                            if (message.type in typeMap) {\n                                messageContainer[typeMap[message.type]]({\n                                    'message': message.text\n                                });\n                            }\n                        });\n                    }\n                };\n\n            customerData.get('messages').subscribe(messageSubscriptionCallback);\n        };\n    }\n);\n","Vertex_Tax/js/view/checkout/summary/tax-messages.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'underscore',\n    'ko',\n    'uiComponent',\n    'Magento_Checkout/js/model/totals'\n], function (_, ko, Component, totals) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            messages: []\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            this.subscribeTotals();\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe('messages');\n            this.getMessages();\n\n            return this;\n        },\n\n        /**\n         * Retrieve messages\n         */\n        getMessages: function () {\n            var taxSegment = totals.getSegment('tax');\n\n            this.messages([]);\n\n            if (taxSegment && taxSegment['extension_attributes']) {\n                this.messages(taxSegment['extension_attributes']['vertex_tax_calculation_messages']);\n            }\n        },\n\n        /**\n         * Subscribe totals observer\n         */\n        subscribeTotals: function () {\n            var self = this;\n\n            totals.totals.subscribe(\n                function () {\n                    self.getMessages();\n                },\n                null,\n                'change'\n            );\n        }\n    });\n});\n"}
}});
